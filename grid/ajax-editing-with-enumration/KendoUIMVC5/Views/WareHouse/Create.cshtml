@model KendoUIMVC5.Models.WareHouse

@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <h4>WareHouse</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>

        <input id="Toto" name="Toto" type="hidden" data-bind="value: inputValue" />

        <div id="example" data-role="grid"
             data-editable="true"
             data-toolbar="['create', 'save']"
             data-columns="[
                                 { 'field': 'ProductName', 'width': 270 },
                                 { 'field': 'UnitPrice' },
                              ]"
             data-bind="source: products,
                            visible: isVisible,
                            events: {
                             saveChanges: onChange,
                              save: onSave
                            }"
             style="height: 200px"></div>

            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Create" class="btn btn-default" />
                </div>
            </div>
        </div>
}
    @Html.ActionLink("Back to List", "Index")



<script>
    var viewModel = kendo.observable({
        inputValue: "toto",
        isVisible: true,
        onChange: function (e) {
            this.set("inputValue", kendo.stringify(e.data.products._data));
            console.log("event :: change(" + kendo.stringify(e.data) + ")");
        },
        onSave: function (e) {
            this.set("inputValue", kendo.stringify(e.data.products._data));
            console.log("event :: save(" + kendo.stringify(e.values, null, 4) + ")");
        },
        products: new kendo.data.DataSource({
            schema: {
                model: {
                    id: "ProductID",
                    fields: {
                        ProductName: { type: "string" },
                        UnitPrice: { type: "number" }
                    }
                }
            },
            batch: true,
            transport: {
                read: {
                    url: "https://demos.telerik.com/kendo-ui/service/products",
                    dataType: "jsonp"
                },
                update: {
                    url: "https://demos.telerik.com/kendo-ui/service/products/update",
                    dataType: "jsonp"
                },
                create: {
                    url: "https://demos.telerik.com/kendo-ui/service/products/create",
                    dataType: "jsonp"
                },
                parameterMap: function(options, operation) {
                    if (operation !== "read" && options.models) {
                        return {models: kendo.stringify(options.models)};
                    }
                }
            }
        })
    });
    kendo.bind($("#example"), viewModel);
    kendo.bind($("#Toto"), viewModel);
</script>